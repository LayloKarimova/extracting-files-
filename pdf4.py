from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
import time
import requests
from pypdf import PdfReader
import io
from concurrent.futures import ThreadPoolExecutor
from openpyxl import Workbook

# Function to configure and create a WebDriver instance
def create_driver():
    options = webdriver.ChromeOptions()
    options.binary_location = r"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
    options.add_argument('--headless')

    service = Service(r"C:\\Users\\Asus\\.cache\\selenium\\chromedriver\\win64\\128.0.6613.137\\chromedriver.exe")
    return webdriver.Chrome(service=service, options=options)

# Function to read PDF content and combine ism, familiya, and sh
def read_pdf(content) -> dict:
    reader = PdfReader(io.BytesIO(content))
    page = reader.pages[0]
    text = page.extract_text()
    text = text.split('\n')
    
    # Combine ism, familiya, and sh into a single string
    full_name = f"{text[2]} {text[3]} {text[4]}"
    
    return {
        'passport': text[1],
        'full_name': full_name
    }

# Main function to process each certificate
def process_certificate(url, cert_number):
    driver = create_driver()
    driver.get(url)

    time.sleep(5)
    input_field = driver.find_element(By.ID, 'data-cert_number')
    input_field.send_keys(cert_number)

    # Remove the captcha field
    js_code = """
    var element = document.getElementsByClassName('form-group field-data-verifycode')[0]
    element.remove()
    """
    driver.execute_script(js_code)

    btn = driver.find_element(By.ID, 'save-see-form')
    btn.click()

    download_link = driver.find_element(By.XPATH, '//a[@class="btn btn-primary"]')
    pdf_url = download_link.get_attribute('href')
    driver.quit()
    response = requests.get(pdf_url)

    info = read_pdf(response.content)
    info['cert_number'] = cert_number  # Include certificate number for reference
    return info

# Wrapper function to call from the thread pool
def thread_main(cert_number):
    return process_certificate(SITE_URL, cert_number)

# Main function to execute multiple threads and save results to Excel
def main(cert_numbers, output_excel):
    with ThreadPoolExecutor(max_workers=5) as executor:
        results = executor.map(thread_main, cert_numbers)

    # Create an Excel workbook and worksheet
    workbook = Workbook()
    worksheet = workbook.active
    worksheet.title = "Certificate Data"
    
    # Write headers
    headers = ['cert_number', 'passport', 'full_name']
    worksheet.append(headers)
    
    # Write data to the worksheet
    for result in results:
        worksheet.append([result['cert_number'], result['passport'], result['full_name']])
    
    # Save the workbook to a file
    workbook.save(output_excel)
    
    print(f"Data has been saved to {output_excel}")

# Example usage
SITE_URL = 'https://sertifikat.uzbmb.uz/site/cert?type=1'
CERT_NUMBERS = [
'24BBA1237370SR',
'24BBA1120004ED',
'24BBA1135027YA',
'22DTM1004892AS',
'24BBA1156955MF',
'24BBA1125979RS',
'24BBA1156957AZ',
'24BBA1157079YE',
'24BBA1134849IS',
'24BBA1195839KD',
'24BBA1194559AN',
'24BBA1149290IA',
'24BBA1149986TK',
'24BBA1230119KG',
'24BBA1146698SD',
'24BBA1169069HM',
'24BBA1168243JM',
'22DTM1008845JZ',
'24BBA1214606XR',
'24BBA1121960UN',
'24BBA1183252MM',
'24BBA1137995XI',
'24BBA1137612TD',
'24BBA1160700AD',
'24BBA1160352BM',
'24BBA1107014AS',
'24BBA1198450RS',
'24BBA1198248AM',
'24BBA1132059MB',
'24BBA1171726OD',
'24BBA1143931VF',
'24BBA1200711ON',
'24BBA1106683AM',
'24BBA1165498NO',
'24BBA1247916QM',
'24BBA1107270HM',
'24BBA1106867UA',
'24BBA1151958AN',
'24BBA1107383GB',
'24BBA1107306MR',
'24BBA1198248AM',
'24BBA1107270HM',
'24BBA1179178AB',
'24BBA1113890TX',
'24BBA1209773SM',
'24BBA1145322AN',
'24BBA1157938MA',
'24BBA1209434NA',
'24BBA1186938TM',
'24BBA1113647XM',
'24BBA1208424NM',
'24BBA1189729AS',
'24BBA1191382ZN',
'24BBA1221933XS',
'24BBA1191758AB',
'24BBA1191685NE',
'24BBA1122299MB',
'24BBA1224184SS',
'24BBA1194219AA',
'24BBA1191773AA',
'24BBA1191942BM',
'24BBA1221615SN',
'24BBA1190106JO',
'24BBA1193391IU',
'24BBA1194259IK',
'24BBA1167996XZ',
'24BBA1141830AS',
'24BBA1165999SS',
'24BBA1142837RS',
'24BBA1245607TA',
'24BBA1193436KJ',
'24BBA1189675AS',
'24BBA1193280EK',
'24BBA1193696QD',
'24BBA1141830AS',
'24BBA1225565NM',
'24BBA1193441AS',
'24BBA1190888SN',
'24BBA1167838AX',
'24BBA1147245XS',
'24BBA1222534SO',
'24BBA1129633OS',
'24BBA1190280IS',
'24BBA1193828AJ',
'24BBA1129003AS',
'24BBA1142837RS',
'24BBA1120468QS',
'24BBA1167188NA',
'24BBA1190483RA',
'24BBA1122187AA',
'24BBA1191718RS',
'24BBA1190608PS',
'24BBA1147797KM',
'24BBA1192331MM',
'24BBA1221832BA',
'24BBA1190658TK',
'24BBA1190184JM',
'24BBA1147245XS',
'24BBA1190349AI',
'24BBA1191693XJ',
'24BBA1192781TM',
'24BBA1190936JS',
'24BBA1166826EM',
'24BBA1141890QA',
'24BBA1166408ON',
'24BBA1194075TD',
'24BBA1121668NM',
'24BBA1221587BM',
'24BBA1192435XS',
'24BBA1190598SR',
'24BBA1221161SE',
'24BBA1191942BM',
'24BBA1221438NH',
'24BBA1142091MD',
'24BBA1190296SA',
'24BBA1142176UD',
'24BBA1189387SK',
'24BBA1192268LA',
'24BBA1193212NA',
'24BBA1191836AA',
'24BBA1167977MM',
'24BBA1191865KM',
'24BBA1166136AD',
'24BBA1134814AZ',
'24BBA1177220JN',
'24BBA1112138AS',
'24BBA1178720AS',
'24BBA1178137QB',
'24BBA1178529YS',
'24BBA1112793PM',
'24BBA1191337XM',
'23BBA1095447QJ',
'24BBA1160804TT',
'24BBA1243569AS',
'24BBA1126261OU',
'24BBA1112238ST',
'24BBA1194671DD',
'24BBA1140860MN',
'24BBA1121843KA',
'22DTM1001277TV',
'24BBA1194584BP',
'24BBA1166634PD',
'24BBA1129982JF',
'23BBA1075928XM',
'24BBA1156673XA',
'24BBA1105113SG',
'24BBA1134876SS',
'24BBA1194584BP',
'24BBA1150040KO',
'24BBA1143194SA',
'24BBA1194522XM',
'24BBA1194522XM',
'24BBA1143194SA',
'23BBA1075928XM',
'24BBA1130016SB',
'23BBA1075928XM',
'23BBA1075928XM',
'24BBA1194671DD',
'24BBA1212915IM',
'24BBA1145913AG',
'24BBA1182739SD',
'24BBA1115743MS',
'24BBA1182547SS',
'24BBA1139953ES',
'22DTM1026556YY',
'24BBA1115950HS',
'24BBA1115679SD',
'24BBA1183202UN',
'24BBA1212887MJ',
'24BBA1171926GM',
'24BBA1199439AH',
'24BBA1199439AH',
'24BBA1193086JM',
'24BBA1198354AM',
'24BBA1124905TM',
'24BBA1106647JN',
'24BBA1200921XS',
'24BBA1152538IJ',
'24BBA1199688XS',
'24BBA1124474BG',
'24BBA1232667MM',
'24BBA1124474BG',
'24BBA1152020YH',
'24BBA1171735QM',
'24BBA1198354AM',
'24BBA1199609GJ',
'24BBA1198405TM',
'24BBA1152828AA',
'24BBA1171619EA',
'24BBA1198462MD',
'24BBA1120652TS',
'24BBA1196291MS',
'24BBA1201063AD',
'24BBA1107484PS',
'24BBA1226843BN',
'24BBA1107423EN',
'24BBA1120652TS',
'24BBA1144057PA',
'24BBA1131537MD',
'24BBA1135971RB',
'24BBA1238462BS',
'24BBA1157436NH',
'24BBA1113703UD',
'24BBA1136007NH',
'22DTM1026545AA',
'24BBA1113852ON',
'24BBA1113073BA',
'24BBA1136409NS',
'24BBA1126684IR',
'24BBA1113073BA',
'24BBA1113073BA',
'24BBA1141024EM',
'24BBA1221264JD',
'24BBA1194287JS',
'23BBA1006147KS',
'24BBA1128856ST',
'24BBA1188880MM',
'24BBA1141024EM',
'24BBA1193353OD',
'24BBA1222658XM',
'24BBA1147476IR',
'24BBA1193742MS',
'24BBA1123250AA',
'24BBA1166537XU',
'24BBA1122117FZ',
'24BBA1193683PH',
'24BBA1167987OD',
'24BBA1192179GS',
'24BBA1191355AR',
'24BBA1193461AN',
'24BBA1141698TM',
'24BBA1123160TM',
'24BBA1222866MD',
'24BBA1191353SN',
'24BBA1141471SA',
'24BBA1189738BE',
'24BBA1246143KO',
'24BBA1247275IG',
'24BBA1223801MM',
'24BBA1194393AG',
'24BBA1142427IO',
'24BBA1190814TM',
'24BBA1191009RN',
'24BBA1193124EB',
'24BBA1192783AI',
'24BBA1189665YE',
'24BBA1191810GS',
'24BBA1222964OS',
'24BBA1192380RA',
'24BBA1245843SG',
'24BBA1193688AS',
'24BBA1142776MD',
'24BBA1225588PS',
'24BBA1193694SA',
'24BBA1223352JG',
'24BBA1193470MV',
'24BBA1191906UB',
'24BBA1246234ME',
'24BBA1193217SD',
'24BBA1192085MY',
'24BBA1188845RA',
'24BBA1123472BK',
'24BBA1193103ZS',
'24BBA1189957SM',
'22DTM1001302XD',
'24BBA1192144XA',
'24BBA1141906SD',
'24BBA1245749NN',
'24BBA1226979KL',
'24BBA1193015QR',
'24BBA1122966BE',
'23BBA1100596PN',
'24BBA1247301AL',
'22DTM1000915XH',
'24BBA1188708MM',
'24BBA1191393QS',
'24BBA1140967UJ',
'24BBA1190256XM',
'24BBA1191602BA',
'22DTM1001302XD',
'24BBA1193934DJ',
'24BBA1192805MM',
'24BBA1223821MA',
'24BBA1190935FM',
'24BBA1122590NF',
'24BBA1194126BX',
'24BBA1193962TK',
'24BBA1248995MM',
'24BBA1226200UD',
'24BBA1194036AM',
'24BBA1188891KM',
'24BBA1194016SU',
'24BBA1191948ZX',
'24BBA1120536MO',
'24BBA1123171JI',
'24BBA1194374SS',
'24BBA1190443KD',
'24BBA1192206EG',
'24BBA1247909ZZ',
'24BBA1193361QM',
'24BBA1147774SM',
'24BBA1192956RD',
'24BBA1193019EB',
'24BBA1191601TN',
'24BBA1190897NM',
'24BBA1121593QA',
'24BBA1157058YN',
'24BBA1135484XM',
'24BBA1206331YO',
'24BBA1156974MS',
'24BBA1206331YO',
'24BBA1112582IR',
'24BBA1247756AR',
'23BBA1075890AQ',
'24BBA1129269KI',
'24BBA1185151AM',
'24BBA1206331YO',
'24BBA1247756AR',
'24BBA1232957BS',
'24BBA1121138YD',
'22DTM1000619RS',
'24BBA1206362KD',
'24BBA1206915BG',
'24BBA1206296IZ',
'24BBA1206828NS',
'24BBA1177223PA',
'24BBA1144979MM',
'24BBA1206413UZ',
'24BBA1206275QR',
'24BBA1112100RS',
'24BBA1215973XS',
'24BBA1229644KI',
'24BBA1130200SA'

]   # Add more, certificate numbers as needed
OUTPUT_EXCEL = 'certificates_data.xlsx'

# Execute and save to Excel
main(CERT_NUMBERS, OUTPUT_EXCEL)
